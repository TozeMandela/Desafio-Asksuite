{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;IAAMA,YAAY;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAEd,aAAWC,GAAG,EAAC;MACX,OAAO,IAAI,CAACC,EAAE,CAAC,KAAK,EAACD,GAAG,CAAC;IAC7B;EAAC;IAAA;IAAA,OACD,cAAYA,GAAG,EAAEE,GAAG,EAAC;MACjB,OAAO,IAAI,CAACD,EAAE,CAAC,MAAM,EAACD,GAAG,EAAEE,GAAG,CAAC;IACnC;EAAC;IAAA;IAAA,OAED,YAAUC,MAAM,EAACH,GAAG,EAAEI,MAAM,EAAC;MACzB,IAAMC,GAAG,GAAG,IAAIC,cAAc,EAAE;MAChCD,GAAG,CAACE,IAAI,CAACJ,MAAM,CAACK,WAAW,EAAE,EAAER,GAAG,CAAC;MAEnCK,GAAG,CAACI,MAAM,GAAG,YAAI;QACbC,OAAO,CAACC,GAAG,CAACN,GAAG,CAACO,YAAY,CAAC;MACjC,CAAC;MAEDP,GAAG,CAACQ,OAAO,GAAG,UAAAC,CAAC,EAAE;QACbJ,OAAO,CAACC,GAAG,CAACG,CAAC,CAAC;MAClB,CAAC;MACDT,GAAG,CAACU,gBAAgB,CAAC,MAAM,EAAE,iBAAiB,CAAC;MAC/CV,GAAG,CAACW,IAAI,CAACZ,MAAM,CAAC;IACpB;EAAC;EAAA;AAAA;AAILa,MAAM,CAACC,OAAO,GAAGnB,YAAY;;;;;;UC1B7B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;+CCrBA;AAAA;AAAA;AADA,IAAMA,YAAY,GAAGoB,mBAAO,CAAC,kDAAgB,CAAC;AAC9C,IAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,kBAAkB,CAAC;AAI5DF,SAAS,CAACG,gBAAgB,CAAC,QAAQ,EAAE,UAAAT,CAAC,EAAE;EACpC;EACAU,eAAe,CAACV,CAAC,CAACW,MAAM,CAAC;EACzBf,OAAO,CAACC,GAAG,CAACS,SAAS,CAACM,KAAK,CAAC;EAC5B;AAEJ,CAAC,CAAC;;AAEF,SAASF,eAAe,CAACG,IAAI,EAAC;EAC1B,IAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK;EAExB,IAAGD,KAAK,CAACE,MAAM,GAAG,CAAC,EAAC;IAChB,IAAMC,IAAI,GAAG,IAAIC,UAAU,EAAE;IAE7BD,IAAI,CAACtB,MAAM;MAAA,sEAAG,iBAAeK,CAAC;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACqBA,CAAC,CAACW,MAAM,CAACQ,MAAM;cAAA;gBAA9DZ,QAAQ,CAACa,cAAc,CAAC,OAAO,CAAC,CAACR,KAAK;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzC;MAAA;QAAA;MAAA;IAAA;IAEHK,IAAI,CAACI,aAAa,CAACP,KAAK,CAAC,CAAC,CAAC,CAAC;EAE9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,I","sources":["webpack://desafio-asksuite/./frontEnd/xhttprequest.js","webpack://desafio-asksuite/webpack/bootstrap","webpack://desafio-asksuite/./frontEnd/index.js"],"sourcesContent":["class XhttpRequest {\r\n\r\n    static get(url){\r\n        return this.GP('get',url);\r\n    }\r\n    static Post(url, obj){\r\n        return this.GP('post',url, obj);\r\n    }\r\n\r\n    static GP(Method,url, params){\r\n        const Xhr = new XMLHttpRequest();\r\n        Xhr.open(Method.toUpperCase(), url)\r\n\r\n        Xhr.onload = ()=>{\r\n            console.log(Xhr.responseText)\r\n        }\r\n\r\n        Xhr.onerror = e=>{\r\n            console.log(e)\r\n        }\r\n        Xhr.setRequestHeader('json', 'aplication/json');\r\n        Xhr.send(params)\r\n    }\r\n    \r\n}\r\n\r\nmodule.exports = XhttpRequest;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const XhttpRequest = require('./xhttprequest');\r\nconst inputfile = document.querySelector('input[type=file]');\r\n\r\n\r\n\r\ninputfile.addEventListener('change', e=>{\r\n    // e.preventDefault();\r\n    ConvertToBase64(e.target);\r\n    console.log(inputfile.value);\r\n    // ()\r\n\r\n});\r\n\r\nfunction ConvertToBase64(foto){\r\n    const photo = foto.files;\r\n\r\n    if(photo.length > 0){\r\n        const file = new FileReader();\r\n\r\n        file.onload = async function(e){\r\n            document.getElementById('photo').value = await e.target.result;\r\n        }\r\n\r\n      file.readAsDataURL(photo[0]);\r\n\r\n    }\r\n}\r\n/* \r\n\r\nfunction getData(formI){\r\n    const inputs = formI.querySelectorAll('input,textarea');\r\n    \r\n    inputs.forEach(fields => {\r\n        if(fields.name == 'foto'){\r\n            ConvertToBase64(fields, inputs)\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction teste(a, inputs){\r\n    let user = {};\r\n    inputs.forEach(fields => {\r\n        if(fields.name == 'foto'){\r\n            user[fields.name] = a;\r\n        }else{\r\n            user[fields.name] = fields.value; \r\n        }\r\n    });\r\nXhttpRequest.Post('/add',user)\r\n} */"],"names":["XhttpRequest","url","GP","obj","Method","params","Xhr","XMLHttpRequest","open","toUpperCase","onload","console","log","responseText","onerror","e","setRequestHeader","send","module","exports","require","inputfile","document","querySelector","addEventListener","ConvertToBase64","target","value","foto","photo","files","length","file","FileReader","result","getElementById","readAsDataURL"],"sourceRoot":""}